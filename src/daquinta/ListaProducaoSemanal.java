/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package daquinta;

import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author toshiba
 */
public class ListaProducaoSemanal extends javax.swing.JFrame {

    /**
     * Creates new form ListaProducaoSemanal
     */
    
    
     /**
     * Creates new form Listaproducao_semanals
     */
    
    Connection con, con2;
    Statement stmt, stmt2;
    static String dbName = "daquinta_teste"; //Nome do Banco criado
    
    
    int curRow = 0;
    int IDs = 1;
    int totalProdutos, totalprodutoress;
    String [] totalNomesProdutos, totalNomesProdutosA,totalNomesProdutosB,totalNomesProdutosC,
            totalNomesProdutosD,totalNomesProdutosE, totalNomesProdutosSeg,totalNomesProdutosTer,
            totalNomesProdutosQua,totalNomesProdutosQui,totalNomesProdutosSex;
    Integer []totalQuantidadeProdutos,totalQuantidadeProdutosA, totalQuantidadeProdutosB, 
            totalQuantidadeProdutosC, totalQuantidadeProdutosD, totalQuantidadeProdutosE, 
            totalQuantidadeProdutosSeg, totalQuantidadeProdutosTer, totalQuantidadeProdutosQua, 
            totalQuantidadeProdutosQui, totalQuantidadeProdutosSex;
    String [] RAItemListSeg, RAItemListTer, RAItemListQua, RAItemListQui, RAItemListSex;
    String [] RBItemListSeg,RBItemListTer,RBItemListQua,RBItemListQui,RBItemListSex;
    String [] RCItemListSeg,RCItemListTer,RCItemListQua,RCItemListQui,RCItemListSex;
    String [] RDItemListSeg,RDItemListTer,RDItemListQua,RDItemListQui,RDItemListSex;
    String [] REItemListSeg,REItemListTer,REItemListQua,REItemListQui,REItemListSex;

    Integer[] RAItemList2Seg,RAItemList2Ter, RAItemList2Qua, RAItemList2Qui, RAItemList2Sex;
    Integer[] RBItemList2Seg,RBItemList2Ter, RBItemList2Qua, RBItemList2Qui, RBItemList2Sex;
    Integer[] RCItemList2Seg,RCItemList2Ter, RCItemList2Qua, RCItemList2Qui, RCItemList2Sex;
    Integer[] RDItemList2Seg,RDItemList2Ter, RDItemList2Qua, RDItemList2Qui, RDItemList2Sex;
    Integer[] REItemList2Seg,REItemList2Ter, REItemList2Qua, REItemList2Qui, REItemList2Sex;
   
    DB conDB = new DB();
    boolean editar = false, criarnovo=false;
    //data 
    java.util.Date date = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
       
    Integer ano=date.getYear()+1900;
  
    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
   
    Calendar cal = Calendar.getInstance();
    Calendar calUk = Calendar.getInstance(Locale.UK);  
   
    JComboBox cbIdDisciplina, cbDisciplina; 
    
    int produtores;
    Integer getWeekofYear = calUk.get( Calendar.WEEK_OF_YEAR );
    public ListaProducaoSemanal() {
        initComponents();
        if (getWeekofYear==1) jComboBoxWeek.setSelectedIndex(1);
        else jComboBoxWeek.setSelectedIndex(getWeekofYear-1);
        jComboBoxAno.setSelectedIndex(ano-2011);
        jLabelSemana.setText(getWeekofYear.toString());
        jLabelData.setText(dateFormat.format(date).toString());
        
        DoConnect();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel49 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jComboBoxAno = new javax.swing.JComboBox();
        jScrollPane51 = new javax.swing.JScrollPane();
        jListQuaTotal = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane53 = new javax.swing.JScrollPane();
        jListSexTotal = new javax.swing.JList();
        jBtnPesquisa = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListSeg4 = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListSeg1 = new javax.swing.JList();
        jScrollPane24 = new javax.swing.JScrollPane();
        jListQui4 = new javax.swing.JList();
        jLabel45 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jListQui3 = new javax.swing.JList();
        btnCancel = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jListTotal1 = new javax.swing.JList();
        jScrollPane22 = new javax.swing.JScrollPane();
        jListTer4 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane50 = new javax.swing.JScrollPane();
        jListTerTotal = new javax.swing.JList();
        jScrollPane21 = new javax.swing.JScrollPane();
        jListTotal3 = new javax.swing.JList();
        jScrollPane10 = new javax.swing.JScrollPane();
        jListSex1 = new javax.swing.JList();
        jScrollPane29 = new javax.swing.JScrollPane();
        jListQui5 = new javax.swing.JList();
        jScrollPane23 = new javax.swing.JScrollPane();
        jListQua4 = new javax.swing.JList();
        jLabelSemana = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListSeg5 = new javax.swing.JList();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane49 = new javax.swing.JScrollPane();
        jListSegTotal = new javax.swing.JList();
        jComboBoxWeek = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListSeg3 = new javax.swing.JList();
        jScrollPane16 = new javax.swing.JScrollPane();
        jListTer2 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListSeg2 = new javax.swing.JList();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListQui1 = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListQua1 = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListTer1 = new javax.swing.JList();
        jScrollPane27 = new javax.swing.JScrollPane();
        jListTer5 = new javax.swing.JList();
        jScrollPane12 = new javax.swing.JScrollPane();
        jListTotal2 = new javax.swing.JList();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane25 = new javax.swing.JScrollPane();
        jListSex4 = new javax.swing.JList();
        jScrollPane54 = new javax.swing.JScrollPane();
        jListTotal9 = new javax.swing.JList();
        jScrollPane20 = new javax.swing.JScrollPane();
        jListSex3 = new javax.swing.JList();
        jScrollPane13 = new javax.swing.JScrollPane();
        jListSex2 = new javax.swing.JList();
        jScrollPane14 = new javax.swing.JScrollPane();
        jListQui2 = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane26 = new javax.swing.JScrollPane();
        jListTotal4 = new javax.swing.JList();
        jLabel43 = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        jListQua3 = new javax.swing.JList();
        jScrollPane28 = new javax.swing.JScrollPane();
        jListQua5 = new javax.swing.JList();
        jScrollPane17 = new javax.swing.JScrollPane();
        jListTer3 = new javax.swing.JList();
        jScrollPane30 = new javax.swing.JScrollPane();
        jListSex5 = new javax.swing.JList();
        jLabelData = new javax.swing.JLabel();
        jScrollPane31 = new javax.swing.JScrollPane();
        jListTotal5 = new javax.swing.JList();
        jLabel44 = new javax.swing.JLabel();
        jScrollPane52 = new javax.swing.JScrollPane();
        jListQuiTotal = new javax.swing.JList();
        jScrollPane15 = new javax.swing.JScrollPane();
        jListQua2 = new javax.swing.JList();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista da Produção Semanal");
        setResizable(false);

        jLabel49.setText("Totais");

        jLabel42.setText("Ricardo de Matos");

        jComboBoxAno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2011", "2012", "2013", "2014", "2015" }));
        jComboBoxAno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAnoActionPerformed(evt);
            }
        });

        jListQuaTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane51.setViewportView(jListQuaTotal);

        jLabel2.setText("Semana");

        jListSexTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane53.setViewportView(jListSexTotal);

        jBtnPesquisa.setText("Pesquisa");
        jBtnPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPesquisaActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(jListSeg4);

        jScrollPane1.setViewportView(jListSeg1);

        jScrollPane24.setViewportView(jListQui4);

        jLabel45.setText("Jardim da Boa Palavra");

        jLabel3.setText("Segunda");

        jScrollPane19.setViewportView(jListQui3);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/118.png"))); // NOI18N
        btnCancel.setText("Cancelar");
        btnCancel.setMaximumSize(new java.awt.Dimension(111, 41));
        btnCancel.setMinimumSize(new java.awt.Dimension(111, 41));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel7.setText("Sexta");

        jLabel6.setText("Quinta");

        jLabel5.setText("Quarta");

        jLabel4.setText("Terça");

        jListTotal1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane11.setViewportView(jListTotal1);

        jScrollPane22.setViewportView(jListTer4);

        jLabel1.setText("Special Flowers");

        jListTerTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane50.setViewportView(jListTerTotal);

        jListTotal3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane21.setViewportView(jListTotal3);

        jScrollPane10.setViewportView(jListSex1);

        jScrollPane29.setViewportView(jListQui5);

        jScrollPane23.setViewportView(jListQua4);

        jLabelSemana.setText("jLabel17");

        jScrollPane5.setViewportView(jListSeg5);

        jLabel18.setText("Semana:");

        jListSegTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane49.setViewportView(jListSegTotal);

        jComboBoxWeek.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55" }));

        jScrollPane3.setViewportView(jListSeg3);

        jScrollPane16.setViewportView(jListTer2);

        jScrollPane2.setViewportView(jListSeg2);

        jScrollPane9.setViewportView(jListQui1);

        jScrollPane8.setViewportView(jListQua1);

        jScrollPane7.setViewportView(jListTer1);

        jScrollPane27.setViewportView(jListTer5);

        jListTotal2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane12.setViewportView(jListTotal2);

        jLabel17.setText("DATA:");

        jScrollPane25.setViewportView(jListSex4);

        jListTotal9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane54.setViewportView(jListTotal9);

        jScrollPane20.setViewportView(jListSex3);

        jScrollPane13.setViewportView(jListSex2);

        jScrollPane14.setViewportView(jListQui2);

        jLabel8.setText("Total");

        jListTotal4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane26.setViewportView(jListTotal4);

        jLabel43.setText("Luís Godinho");

        jScrollPane18.setViewportView(jListQua3);

        jScrollPane28.setViewportView(jListQua5);

        jScrollPane17.setViewportView(jListTer3);

        jScrollPane30.setViewportView(jListSex5);

        jLabelData.setText("88-88.8888");

        jListTotal5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane31.setViewportView(jListTotal5);

        jLabel44.setText("Quinta da Várzea");

        jListQuiTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane52.setViewportView(jListQuiTotal);

        jScrollPane15.setViewportView(jListQua2);

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/78.png"))); // NOI18N
        jLabel20.setText("Produção Semanal");
        jLabel20.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel44)
                            .addComponent(jLabel45, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel43))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane28, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane30, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane31, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel49)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane49, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane50, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane51, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane52, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane53, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane54, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel3)
                                .addGap(133, 133, 133)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelSemana, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxAno, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxWeek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5)
                        .addGap(153, 153, 153)
                        .addComponent(jLabel6)
                        .addGap(152, 152, 152)
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelData)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabelSemana)
                                    .addComponent(jComboBoxAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxWeek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnPesquisa)
                                    .addComponent(jLabel2))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel43))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel44))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane28, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane30, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane31, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel45))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane53, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane52, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane51, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane50, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane49, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane54, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabel49)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPesquisaActionPerformed
        // TODO add your handling code here:
        ano = Integer.parseInt((String) jComboBoxAno.getSelectedItem());
        getWeekofYear = Integer.parseInt((String) jComboBoxWeek.getSelectedItem());
        DoConnect();
    }//GEN-LAST:event_jBtnPesquisaActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:

        closeApplication();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jComboBoxAnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxAnoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaProducaoSemanal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaProducaoSemanal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaProducaoSemanal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaProducaoSemanal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ListaProducaoSemanal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton jBtnPesquisa;
    private javax.swing.JComboBox jComboBoxAno;
    private javax.swing.JComboBox jComboBoxWeek;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelSemana;
    private javax.swing.JList jListQua1;
    private javax.swing.JList jListQua2;
    private javax.swing.JList jListQua3;
    private javax.swing.JList jListQua4;
    private javax.swing.JList jListQua5;
    private javax.swing.JList jListQuaTotal;
    private javax.swing.JList jListQui1;
    private javax.swing.JList jListQui2;
    private javax.swing.JList jListQui3;
    private javax.swing.JList jListQui4;
    private javax.swing.JList jListQui5;
    private javax.swing.JList jListQuiTotal;
    private javax.swing.JList jListSeg1;
    private javax.swing.JList jListSeg2;
    private javax.swing.JList jListSeg3;
    private javax.swing.JList jListSeg4;
    private javax.swing.JList jListSeg5;
    private javax.swing.JList jListSegTotal;
    private javax.swing.JList jListSex1;
    private javax.swing.JList jListSex2;
    private javax.swing.JList jListSex3;
    private javax.swing.JList jListSex4;
    private javax.swing.JList jListSex5;
    private javax.swing.JList jListSexTotal;
    private javax.swing.JList jListTer1;
    private javax.swing.JList jListTer2;
    private javax.swing.JList jListTer3;
    private javax.swing.JList jListTer4;
    private javax.swing.JList jListTer5;
    private javax.swing.JList jListTerTotal;
    private javax.swing.JList jListTotal1;
    private javax.swing.JList jListTotal2;
    private javax.swing.JList jListTotal3;
    private javax.swing.JList jListTotal4;
    private javax.swing.JList jListTotal5;
    private javax.swing.JList jListTotal9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane49;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane50;
    private javax.swing.JScrollPane jScrollPane51;
    private javax.swing.JScrollPane jScrollPane52;
    private javax.swing.JScrollPane jScrollPane53;
    private javax.swing.JScrollPane jScrollPane54;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables

    private void DoConnect() {
         try {
            String host = "jdbc:mysql://localhost:3306/"+dbName;
            String uName = "root";
            String uPass ="admin";
            con = DriverManager.getConnection(host, uName, uPass);
            
            stmt = con.createStatement();
            
            //Totais
            String sql1 = "select * from produtos ";
            
            ResultSet rsProdutosTotais;
            
            rsProdutosTotais = stmt.executeQuery(sql1);
           
            
            rsProdutosTotais.last();
           
            
                            
            totalProdutos=rsProdutosTotais.getRow(); 
           
            totalNomesProdutosSeg = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosSeg = new Integer[rsProdutosTotais.getInt(1)];
            totalNomesProdutosTer = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosTer = new Integer[rsProdutosTotais.getInt(1)];
            totalNomesProdutosQua = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosQua = new Integer[rsProdutosTotais.getInt(1)];
            totalNomesProdutosQui = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosQui = new Integer[rsProdutosTotais.getInt(1)];
            totalNomesProdutosSex = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosSex = new Integer[rsProdutosTotais.getInt(1)];
            
            //total para cada produtores
            totalNomesProdutosA = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosA = new Integer[rsProdutosTotais.getInt(1)];
            totalNomesProdutosB = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosB = new Integer[rsProdutosTotais.getInt(1)];
            totalNomesProdutosC = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosC = new Integer[rsProdutosTotais.getInt(1)];
            totalNomesProdutosD = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosD = new Integer[rsProdutosTotais.getInt(1)];
            totalNomesProdutosE = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutosE = new Integer[rsProdutosTotais.getInt(1)];
           
            
            totalNomesProdutos  = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutos = new Integer[rsProdutosTotais.getInt(1)];
            
            sql1 = "select * from produtos ";
                      
            rsProdutosTotais = stmt.executeQuery(sql1);
            
            rsProdutosTotais.beforeFirst();
           
            int j=0;
            
            while (rsProdutosTotais.next()) {
                totalNomesProdutos[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutos[j] = 0;
                totalNomesProdutosSeg[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosSeg[j] = 0;
                totalNomesProdutosTer[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosTer[j] = 0;
                totalNomesProdutosQua[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosQua[j] = 0;
                totalNomesProdutosQui[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosQui[j] = 0;
                totalNomesProdutosSex[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosSex[j] = 0;
                //Totais para produtos
                totalNomesProdutosA[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosA[j] = 0;
                totalNomesProdutosB[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosB[j] = 0;
                totalNomesProdutosC[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosC[j] = 0;
                totalNomesProdutosD[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosD[j] = 0;
                totalNomesProdutosE[j] = rsProdutosTotais.getString("nome");
                totalQuantidadeProdutosE[j] = 0;
                j++;
            }
            
            DefaultListModel modelprodutoresASeg = new DefaultListModel(); //create a new list model
            DefaultListModel modelprodutoresATer = new DefaultListModel();
            DefaultListModel modelprodutoresAQua = new DefaultListModel();
            DefaultListModel modelprodutoresAQui = new DefaultListModel();
            DefaultListModel modelprodutoresASex = new DefaultListModel();
            DefaultListModel modelprodutoresBSeg = new DefaultListModel(); //create a new list model
            DefaultListModel modelprodutoresBTer = new DefaultListModel();
            DefaultListModel modelprodutoresBQua = new DefaultListModel();
            DefaultListModel modelprodutoresBQui = new DefaultListModel();
            DefaultListModel modelprodutoresBSex = new DefaultListModel();
            DefaultListModel modelprodutoresCSeg = new DefaultListModel(); //create a new list model
            DefaultListModel modelprodutoresCTer = new DefaultListModel();
            DefaultListModel modelprodutoresCQua = new DefaultListModel();
            DefaultListModel modelprodutoresCQui = new DefaultListModel();
            DefaultListModel modelprodutoresCSex = new DefaultListModel();
            DefaultListModel modelprodutoresDSeg = new DefaultListModel(); //create a new list model
            DefaultListModel modelprodutoresDTer = new DefaultListModel();
            DefaultListModel modelprodutoresDQua = new DefaultListModel();
            DefaultListModel modelprodutoresDQui = new DefaultListModel();
            DefaultListModel modelprodutoresDSex = new DefaultListModel();
            DefaultListModel modelprodutoresESeg = new DefaultListModel(); //create a new list model
            DefaultListModel modelprodutoresETer = new DefaultListModel();
            DefaultListModel modelprodutoresEQua = new DefaultListModel();
            DefaultListModel modelprodutoresEQui = new DefaultListModel();
            DefaultListModel modelprodutoresESex = new DefaultListModel();
            
            int linha=0;
            
            
            
            
            //produtores 1 Segunda
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdseg, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=1 AND YEAR("+dbName+".producao_semanal.data) ="
                    + "'" + ano +"' AND getWeekofYear="+ getWeekofYear;
                       
            ResultSet rsProdutos;
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RAItemListSeg= new String[rsProdutos.getRow()];
            RAItemList2Seg= new Integer[rsProdutos.getRow()];
                    
            boolean control;
            int i=0;
            rsProdutos.beforeFirst();
            while (rsProdutos.next()){ 
               control=false;
               
               totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");   
               
               for(j=0;j<RAItemListSeg.length;j++)  {
                           
                   if (rsProdutos.getString("produtos.nome").equals(RAItemListSeg[j]) && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                            RAItemList2Seg[j] = RAItemList2Seg[j] + rsProdutos.getInt("producao_semanal.qtdseg");
                            //totalQuantidadeProdutosA[j] = totalQuantidadeProdutosA[j] + rsProdutos.getInt("producao_semanal.qtdseg");
                            control=true;
                            break;
                    }
               }
                if (control==false && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                    RAItemListSeg[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RAItemList2Seg[linha] = rsProdutos.getInt("producao_semanal.qtdseg"); //get the element in column "item_code"
                    linha++;
               }  
               
            }
           for(j=0;j<linha;j++)  
               modelprodutoresASeg.addElement(RAItemListSeg[j] + " - " + RAItemList2Seg[j].toString()); 
            
            jListSeg1.setModel(modelprodutoresASeg);
          
            rsProdutos.close();
           //produtores 1 Terça
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdter, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=1 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RAItemListTer= new String[rsProdutos.getRow()];
            RAItemList2Ter= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");   
               for(j=0;j<RAItemListTer.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(RAItemListTer[j]) && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                            RAItemList2Ter[j] = RAItemList2Ter[j] + rsProdutos.getInt("producao_semanal.qtdter");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                    RAItemListTer[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RAItemList2Ter[linha] = rsProdutos.getInt("producao_semanal.qtdter"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresATer.addElement(RAItemListTer[j] + " - " + RAItemList2Ter[j].toString()); 
            
            jListTer1.setModel(modelprodutoresATer);
          
            rsProdutos.close();
            //produtores 1 Quarta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqua, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=1 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RAItemListQua= new String[rsProdutos.getRow()];
            RAItemList2Qua= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");   
               for(j=0;j<RAItemListQua.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(RAItemListQua[j]) && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                            RAItemList2Qua[j] = RAItemList2Qua[j] + rsProdutos.getInt("producao_semanal.qtdqua");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                    RAItemListQua[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RAItemList2Qua[linha] = rsProdutos.getInt("producao_semanal.qtdqua"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresAQua.addElement(RAItemListQua[j] + " - " + RAItemList2Qua[j].toString()); 
            
            jListQua1.setModel(modelprodutoresAQua);
          
            rsProdutos.close();
            
            //produtores 1 Quinta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqui, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=1 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RAItemListQui= new String[rsProdutos.getRow()];
            RAItemList2Qui= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");   
               for(j=0;j<RAItemListQui.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(RAItemListQui[j]) && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                            RAItemList2Qui[j] = RAItemList2Qui[j] + rsProdutos.getInt("producao_semanal.qtdqui");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                    RAItemListQui[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RAItemList2Qui[linha] = rsProdutos.getInt("producao_semanal.qtdqui"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresAQui.addElement(RAItemListQui[j] + " - " + RAItemList2Qui[j].toString()); 
            
            jListQui1.setModel(modelprodutoresAQui);
          
            rsProdutos.close();
            
            //produtores 1 Sexta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdsex, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=1 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RAItemListSex= new String[rsProdutos.getRow()];
            RAItemList2Sex= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosA[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");   
               for(j=0;j<RAItemListSex.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(RAItemListSex[j]) && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                            RAItemList2Sex[j] = RAItemList2Sex[j] + rsProdutos.getInt("producao_semanal.qtdsex");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                    RAItemListSex[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RAItemList2Sex[linha] = rsProdutos.getInt("producao_semanal.qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresASex.addElement(RAItemListSex[j] + " - " + RAItemList2Sex[j].toString()); 
            
            jListSex1.setModel(modelprodutoresASex);
          
            rsProdutos.close();
            //Total produtores 1
            
            DefaultListModel modelprodutoresTotaisA = new DefaultListModel();
            for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosA[j]!=0)
                 modelprodutoresTotaisA.addElement(totalNomesProdutosA[j] + " - " +  totalQuantidadeProdutosA[j].toString()); 
            }
            
           jListTotal1.setModel(modelprodutoresTotaisA); 
            //Fim produtores 1
            
           
            //produtores 2
            
             sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdseg, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=2 AND YEAR("+dbName+".producao_semanal.data) ="
                     + "'" + ano +"' AND getWeekofYear="+ getWeekofYear;
                       
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RBItemListSeg= new String[rsProdutos.getRow()];
            RBItemList2Seg= new Integer[rsProdutos.getRow()];
            linha=0;
            rsProdutos.beforeFirst();
            while (rsProdutos.next()){ 
               totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");   
               control=false;
               for(j=0;j< RBItemListSeg.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals( RBItemListSeg[j]) && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                            RBItemList2Seg[j] = RBItemList2Seg[j] + rsProdutos.getInt("producao_semanal.qtdseg");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                    RBItemListSeg[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RBItemList2Seg[linha] = rsProdutos.getInt("producao_semanal.qtdseg"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresBSeg.addElement( RBItemListSeg[j] + " - " + RBItemList2Seg[j].toString()); 
            
            jListSeg2.setModel(modelprodutoresBSeg);
          
            rsProdutos.close();
            //produtores 2 Terça
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdter, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=2 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RBItemListTer= new String[rsProdutos.getRow()];
            RBItemList2Ter= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");  
               for(j=0;j< RBItemListTer.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals( RBItemListTer[j]) && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                            RBItemList2Ter[j] = RBItemList2Ter[j] + rsProdutos.getInt("producao_semanal.qtdter");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                    RBItemListTer[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RBItemList2Ter[linha] = rsProdutos.getInt("producao_semanal.qtdter"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresBTer.addElement( RBItemListTer[j] + " - " + RBItemList2Ter[j].toString()); 
            
            jListTer2.setModel(modelprodutoresBTer);
          
            rsProdutos.close();
            //produtores 2 Quarta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqua, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal."
                    + "produtos_idprodutos WHERE "+dbName+".producao_semanal.produtores_idprodutores=2 "
                    + "AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RBItemListQua= new String[rsProdutos.getRow()];
            RBItemList2Qua= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");  
               for(j=0;j< RBItemListQua.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals( RBItemListQua[j]) && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                            RBItemList2Qua[j] = RBItemList2Qua[j] + rsProdutos.getInt("producao_semanal.qtdqua");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                    RBItemListQua[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RBItemList2Qua[linha] = rsProdutos.getInt("producao_semanal.qtdqua"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresBQua.addElement( RBItemListQua[j] + " - " + RBItemList2Qua[j].toString()); 
            
            jListQua2.setModel(modelprodutoresBQua);
          
            rsProdutos.close();
            
            //produtores 2 Quinta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqui, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=2 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RBItemListQui= new String[rsProdutos.getRow()];
            RBItemList2Qui= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");  
               for(j=0;j< RBItemListQui.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals( RBItemListQui[j]) && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                            RBItemList2Qui[j] = RBItemList2Qui[j] + rsProdutos.getInt("producao_semanal.qtdqui");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                    RBItemListQui[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RBItemList2Qui[linha] = rsProdutos.getInt("producao_semanal.qtdqui"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresBQui.addElement( RBItemListQui[j] + " - " + RBItemList2Qui[j].toString()); 
            
            jListQui2.setModel(modelprodutoresBQui);
          
            rsProdutos.close();
            
            //produtores 2 Sexta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdsex, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=2 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
            RBItemListSex= new String[rsProdutos.getRow()];
            RBItemList2Sex= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosB[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");  
               for(j=0;j< RBItemListSex.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals( RBItemListSex[j]) && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                            RBItemList2Sex[j] = RBItemList2Sex[j] + rsProdutos.getInt("producao_semanal.qtdsex");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                    RBItemListSex[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                    RBItemList2Sex[linha] = rsProdutos.getInt("producao_semanal.qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresBSex.addElement( RBItemListSex[j] + " - " + RBItemList2Sex[j].toString()); 
            
            jListSex2.setModel(modelprodutoresBSex);
          
            rsProdutos.close();
            
          //Total produtores 2
            DefaultListModel modelprodutoresTotaisB = new DefaultListModel();
            for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosB[j]!=0)
                 modelprodutoresTotaisB.addElement(totalNomesProdutosB[j] + " - " +  totalQuantidadeProdutosB[j].toString()); 
            }
            
           jListTotal2.setModel(modelprodutoresTotaisB); 
            
           //Fim produtores 2
        
           
            
            
            /////////////////////////////////
            //produtores 3 Segunda
           
           
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdseg, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="
                    + ""+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=3 "
                    + "AND YEAR("+dbName+".producao_semanal.data) ='" + ano +"' AND getWeekofYear="+ getWeekofYear;
                       
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RCItemListSeg= new String[rsProdutos.getRow()];
             RCItemList2Seg= new Integer[rsProdutos.getRow()];
             linha=0;
            rsProdutos.beforeFirst();
            while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");   
               for(j=0;j<  RCItemListSeg.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RCItemListSeg[j]) && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                             RCItemList2Seg[j] =  RCItemList2Seg[j] + rsProdutos.getInt("producao_semanal.qtdseg");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                     RCItemListSeg[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RCItemList2Seg[linha] = rsProdutos.getInt("producao_semanal.qtdseg"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresCSeg.addElement(  RCItemListSeg[j] + " - " +  RCItemList2Seg[j].toString()); 
            
            jListSeg3.setModel(modelprodutoresCSeg);
          
            rsProdutos.close();
           //produtores 3 Terça
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdter, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=3 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RCItemListTer= new String[rsProdutos.getRow()];
             RCItemList2Ter= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");   
               for(j=0;j<  RCItemListTer.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RCItemListTer[j]) && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                             RCItemList2Ter[j] =  RCItemList2Ter[j] + rsProdutos.getInt("producao_semanal.qtdter");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                     RCItemListTer[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RCItemList2Ter[linha] = rsProdutos.getInt("producao_semanal.qtdter"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresCTer.addElement(  RCItemListTer[j] + " - " +  RCItemList2Ter[j].toString()); 
            
            jListTer3.setModel(modelprodutoresCTer);
          
            rsProdutos.close();
           //produtores 3 Quarta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqua, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=3 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RCItemListQua= new String[rsProdutos.getRow()];
             RCItemList2Qua= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
                totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");   
               for(j=0;j<  RCItemListQua.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RCItemListQua[j]) && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                             RCItemList2Qua[j] =  RCItemList2Qua[j] + rsProdutos.getInt("producao_semanal.qtdqua");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                     RCItemListQua[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RCItemList2Qua[linha] = rsProdutos.getInt("producao_semanal.qtdqua"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresCQua.addElement(  RCItemListQua[j] + " - " +  RCItemList2Qua[j].toString()); 
            
            jListQua3.setModel(modelprodutoresCQua);
          
            rsProdutos.close(); 
            
             //produtores 3 Quinta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqui, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=3 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RCItemListQui= new String[rsProdutos.getRow()];
             RCItemList2Qui= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
                totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");   
               for(j=0;j<  RCItemListQui.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RCItemListQui[j]) && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                             RCItemList2Qui[j] =  RCItemList2Qui[j] + rsProdutos.getInt("producao_semanal.qtdqui");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                     RCItemListQui[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RCItemList2Qui[linha] = rsProdutos.getInt("producao_semanal.qtdqui"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresCQui.addElement(  RCItemListQui[j] + " - " +  RCItemList2Qui[j].toString()); 
            
            jListQui3.setModel(modelprodutoresCQui);
          
            rsProdutos.close();
            
            //produtores 3 Sexta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdsex, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=3 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RCItemListSex= new String[rsProdutos.getRow()];
             RCItemList2Sex= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
                totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosC[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");   
               for(j=0;j<  RCItemListSex.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RCItemListSex[j]) && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                             RCItemList2Sex[j] =  RCItemList2Sex[j] + rsProdutos.getInt("producao_semanal.qtdsex");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                     RCItemListSex[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RCItemList2Sex[linha] = rsProdutos.getInt("producao_semanal.qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresCSex.addElement(  RCItemListSex[j] + " - " +  RCItemList2Sex[j].toString()); 
            
            jListSex3.setModel(modelprodutoresCSex);
          
            rsProdutos.close();
            
          //Total produtores 3
            DefaultListModel modelprodutoresTotaisC = new DefaultListModel();
            for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosC[j]!=0)
                 modelprodutoresTotaisC.addElement(totalNomesProdutosC[j] + " - " +  totalQuantidadeProdutosC[j].toString()); 
            }
            
           jListTotal3.setModel(modelprodutoresTotaisC); 
            
            //Fim produtores 3
            
            /////////////////////////////////
            //produtores 4 Segunda  
           
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdseg, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=4 "
                    + "AND YEAR("+dbName+".producao_semanal.data) ='" + ano +"' AND getWeekofYear="+ getWeekofYear;
                       
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RDItemListSeg= new String[rsProdutos.getRow()];
             RDItemList2Seg= new Integer[rsProdutos.getRow()];
             linha=0;
            rsProdutos.beforeFirst();
            while (rsProdutos.next()){ 
               control=false;
              totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");   
               for(j=0;j<  RDItemListSeg.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RDItemListSeg[j]) && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                             RDItemList2Seg[j] =  RDItemList2Seg[j] + rsProdutos.getInt("producao_semanal.qtdseg");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                     RDItemListSeg[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RDItemList2Seg[linha] = rsProdutos.getInt("producao_semanal.qtdseg"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresDSeg.addElement(  RDItemListSeg[j] + " - " +  RDItemList2Seg[j].toString()); 
            
            jListSeg4.setModel(modelprodutoresDSeg);
          
            rsProdutos.close();
           //produtores 4 Terça
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdter, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=4 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RDItemListTer= new String[rsProdutos.getRow()];
             RDItemList2Ter= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");   
               for(j=0;j<  RDItemListTer.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RDItemListTer[j]) && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                             RDItemList2Ter[j] =  RDItemList2Ter[j] + rsProdutos.getInt("producao_semanal.qtdter");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                     RDItemListTer[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RDItemList2Ter[linha] = rsProdutos.getInt("producao_semanal.qtdter"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresDTer.addElement(  RDItemListTer[j] + " - " +  RDItemList2Ter[j].toString()); 
            
            jListTer4.setModel(modelprodutoresDTer);
          
            rsProdutos.close();
            //produtores 4 Quarta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqua, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=4 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RDItemListQua= new String[rsProdutos.getRow()];
             RDItemList2Qua= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");   
               for(j=0;j<  RDItemListQua.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RDItemListQua[j]) && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                             RDItemList2Qua[j] =  RDItemList2Qua[j] + rsProdutos.getInt("producao_semanal.qtdqua");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                     RDItemListQua[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RDItemList2Qua[linha] = rsProdutos.getInt("producao_semanal.qtdqua"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresDQua.addElement(  RDItemListQua[j] + " - " +  RDItemList2Qua[j].toString()); 
            
            jListQua4.setModel(modelprodutoresDQua);
          
            rsProdutos.close();
            
            //produtores 4 Quinta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqui, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=4 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RDItemListQui= new String[rsProdutos.getRow()];
             RDItemList2Qui= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");   
               for(j=0;j<  RDItemListQui.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RDItemListQui[j]) && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                             RDItemList2Qui[j] =  RDItemList2Qui[j] + rsProdutos.getInt("producao_semanal.qtdqui");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                     RDItemListQui[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RDItemList2Qui[linha] = rsProdutos.getInt("producao_semanal.qtdqui"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresDQui.addElement(  RDItemListQui[j] + " - " +  RDItemList2Qui[j].toString()); 
            
            jListQui4.setModel(modelprodutoresDQui);
          
            rsProdutos.close();
            
            //produtores 4 Sexta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdsex, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=4 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             RDItemListSex= new String[rsProdutos.getRow()];
             RDItemList2Sex= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
               totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosD[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");   
               for(j=0;j<  RDItemListSex.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  RDItemListSex[j]) && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                             RDItemList2Sex[j] =  RDItemList2Sex[j] + rsProdutos.getInt("producao_semanal.qtdsex");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                     RDItemListSex[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     RDItemList2Sex[linha] = rsProdutos.getInt("producao_semanal.qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresDSex.addElement(  RDItemListSex[j] + " - " +  RDItemList2Sex[j].toString()); 
            
            jListSex4.setModel(modelprodutoresDSex);
          
            rsProdutos.close();
            
          //Total produtores 4
            DefaultListModel modelprodutoresTotaisD = new DefaultListModel();
            for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosD[j]!=0)
                 modelprodutoresTotaisD.addElement(totalNomesProdutosD[j] + " - " +  totalQuantidadeProdutosD[j].toString()); 
            }
            
           jListTotal4.setModel(modelprodutoresTotaisD); 
            
            //Fim produtores 4
            
            /////////////////////////////////
            //produtores 5 Segunda   
         
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdseg, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=5 AND"
                    + " YEAR("+dbName+".producao_semanal.data) ='" + ano +"' AND getWeekofYear="+ getWeekofYear;
                       
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             REItemListSeg= new String[rsProdutos.getRow()];
             REItemList2Seg= new Integer[rsProdutos.getRow()];
             linha=0;
            rsProdutos.beforeFirst();
            while (rsProdutos.next()){ 
               control=false;
              totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdseg");   
               for(j=0;j<  REItemListSeg.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  REItemListSeg[j]) && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                             REItemList2Seg[j] =  REItemList2Seg[j] + rsProdutos.getInt("producao_semanal.qtdseg");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdseg")!=0) {
                     REItemListSeg[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     REItemList2Seg[linha] = rsProdutos.getInt("producao_semanal.qtdseg"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresESeg.addElement(  REItemListSeg[j] + " - " +  REItemList2Seg[j].toString()); 
            
            jListSeg5.setModel(modelprodutoresESeg);
          
            rsProdutos.close();
           //produtores 5 Terça
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdter, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=5 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             REItemListTer= new String[rsProdutos.getRow()];
             REItemList2Ter= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
                totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdter");  
               for(j=0;j<  REItemListTer.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  REItemListTer[j]) && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                             REItemList2Ter[j] =  REItemList2Ter[j] + rsProdutos.getInt("producao_semanal.qtdter");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdter")!=0) {
                     REItemListTer[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     REItemList2Ter[linha] = rsProdutos.getInt("producao_semanal.qtdter"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresETer.addElement(  REItemListTer[j] + " - " +  REItemList2Ter[j].toString()); 
            
            jListTer5.setModel(modelprodutoresETer);
          
            rsProdutos.close();
            //produtores 5 Quarta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqua, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=5 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             REItemListQua= new String[rsProdutos.getRow()];
             REItemList2Qua= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
                totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqua");  
               for(j=0;j<  REItemListQua.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  REItemListQua[j]) && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                             REItemList2Qua[j] =  REItemList2Qua[j] + rsProdutos.getInt("producao_semanal.qtdqua");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqua")!=0) {
                     REItemListQua[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     REItemList2Qua[linha] = rsProdutos.getInt("producao_semanal.qtdqua"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresEQua.addElement(  REItemListQua[j] + " - " +  REItemList2Qua[j].toString()); 
            
            jListQua5.setModel(modelprodutoresEQua);
          
            rsProdutos.close();
            
            //produtores 5 Quinta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdqui, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=5 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             REItemListQui= new String[rsProdutos.getRow()];
             REItemList2Qui= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
                totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdqui");  
               for(j=0;j<  REItemListQui.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  REItemListQui[j]) && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                             REItemList2Qui[j] =  REItemList2Qui[j] + rsProdutos.getInt("producao_semanal.qtdqui");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdqui")!=0) {
                     REItemListQui[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     REItemList2Qui[linha] = rsProdutos.getInt("producao_semanal.qtdqui"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresEQui.addElement(  REItemListQui[j] + " - " +  REItemList2Qui[j].toString()); 
            
            jListQui5.setModel(modelprodutoresEQui);
          
            rsProdutos.close();
            
            //produtores 5 Sexta
            sql1 = "SELECT "+dbName+".produtos.nome, "+dbName+".producao_semanal.qtdsex, produtos.idprodutos FROM "+dbName+".produtos "
                    + "INNER JOIN "+dbName+".producao_semanal ON "+dbName+".produtos.idprodutos="+dbName+".producao_semanal.produtos_idprodutos "
                    + "WHERE "+dbName+".producao_semanal.produtores_idprodutores=5 AND YEAR("+dbName+".producao_semanal.data) ='"+ano+"' "
                    + "AND getWeekofYear="+ getWeekofYear;
         
            
            rsProdutos = stmt.executeQuery(sql1);
            rsProdutos.last();
           
             REItemListSex= new String[rsProdutos.getRow()];
             REItemList2Sex= new Integer[rsProdutos.getRow()];
                     
            rsProdutos.beforeFirst();
            linha=0;
             while (rsProdutos.next()){ 
               control=false;
                totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutosE[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");
               totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1]= totalQuantidadeProdutos[rsProdutos.getInt("produtos.idprodutos")-1] + rsProdutos.getInt("producao_semanal.qtdsex");  
               for(j=0;j<  REItemListSex.length;j++)  {
                    if (rsProdutos.getString("produtos.nome").equals(  REItemListSex[j]) && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                             REItemList2Sex[j] =  REItemList2Sex[j] + rsProdutos.getInt("producao_semanal.qtdsex");
                            control=true;
                            break;
                    }
               }
               if (control==false && rsProdutos.getInt("producao_semanal.qtdsex")!=0) {
                     REItemListSex[linha] = rsProdutos.getString("produtos.nome"); //get the element in column "item_code"
                     REItemList2Sex[linha] = rsProdutos.getInt("producao_semanal.qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelprodutoresESex.addElement(  REItemListSex[j] + " - " +  REItemList2Sex[j].toString()); 
            
            jListSex5.setModel(modelprodutoresESex);
          
            rsProdutos.close();
            
          //Total produtores 5
            DefaultListModel modelprodutoresTotaisE = new DefaultListModel();
            for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosE[j]!=0)
                 modelprodutoresTotaisE.addElement(totalNomesProdutosE[j] + " - " +  totalQuantidadeProdutosE[j].toString()); 
            }
            
           jListTotal5.setModel(modelprodutoresTotaisE); 
            
            //Fim produtores 5
            
                        
            /////////////////////////////////
            
            DefaultListModel modelprodutoresTotaisTotais = new DefaultListModel();
            for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutos[j]!=0)
                 modelprodutoresTotaisTotais.addElement(totalNomesProdutos[j] + " - " +  totalQuantidadeProdutos[j].toString()); 
            }
            
           jListTotal9.setModel(modelprodutoresTotaisTotais); 
            
            //TOTAIS SEGUNDA
            //A
            linha=0;
            for (i=0;i<modelprodutoresASeg.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSeg[j].equals(RAItemListSeg[i])) {
                            totalQuantidadeProdutosSeg[j] = RAItemList2Seg[i] + totalQuantidadeProdutosSeg[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSeg[linha] = RAItemListSeg[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSeg[linha] = RAItemList2Seg[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //B
            for (i=0;i<modelprodutoresBSeg.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSeg[j].equals(RBItemListSeg[i])) {
                            totalQuantidadeProdutosSeg[j] = RBItemList2Seg[i] + totalQuantidadeProdutosSeg[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSeg[linha] = RBItemListSeg[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSeg[linha] = RBItemList2Seg[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //C
            for (i=0;i<modelprodutoresCSeg.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSeg[j].equals(RCItemListSeg[i])) {
                            totalQuantidadeProdutosSeg[j] = RCItemList2Seg[i] + totalQuantidadeProdutosSeg[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSeg[linha] = RCItemListSeg[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSeg[linha] = RCItemList2Seg[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //D
            for (i=0;i<modelprodutoresDSeg.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSeg[j].equals(RDItemListSeg[i])) {
                            totalQuantidadeProdutosSeg[j] = RDItemList2Seg[i] + totalQuantidadeProdutosSeg[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSeg[linha] = RDItemListSeg[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSeg[linha] = RDItemList2Seg[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //E
            for (i=0;i<modelprodutoresESeg.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSeg[j].equals(REItemListSeg[i])) {
                            totalQuantidadeProdutosSeg[j] = REItemList2Seg[i] + totalQuantidadeProdutosSeg[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSeg[linha] = REItemListSeg[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSeg[linha] = REItemList2Seg[i]; //get the element in column "item_code"
                    linha++;
               }
          }
            
          
          
            DefaultListModel modelprodutoresTotaisSeg = new DefaultListModel();
          for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosSeg[j]!=0)
              modelprodutoresTotaisSeg.addElement(totalNomesProdutosSeg[j] + " - " +  totalQuantidadeProdutosSeg[j].toString()); 
          }
              
               
            
           jListSegTotal.setModel(modelprodutoresTotaisSeg); 
                       
         //TOTAIS TERÇA
           
         //A
            linha=0;
            for (i=0;i<modelprodutoresATer.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosTer[j].equals(RAItemListTer[i])) {
                            totalQuantidadeProdutosTer[j] = RAItemList2Ter[i] + totalQuantidadeProdutosTer[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosTer[linha] = RAItemListTer[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosTer[linha] = RAItemList2Ter[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
           //B
            for (i=0;i<modelprodutoresBTer.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosTer[j].equals(RBItemListTer[i])) {
                            totalQuantidadeProdutosTer[j] = RBItemList2Ter[i] + totalQuantidadeProdutosTer[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosTer[linha] = RBItemListTer[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosTer[linha] = RBItemList2Ter[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
             //C
            for (i=0;i<modelprodutoresCTer.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosTer[j].equals(RCItemListTer[i])) {
                            totalQuantidadeProdutosTer[j] = RCItemList2Ter[i] + totalQuantidadeProdutosTer[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosTer[linha] = RCItemListTer[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosTer[linha] = RCItemList2Ter[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //D
            for (i=0;i<modelprodutoresDTer.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosTer[j].equals(RDItemListTer[i])) {
                            totalQuantidadeProdutosTer[j] = RDItemList2Ter[i] + totalQuantidadeProdutosTer[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosTer[linha] = RDItemListTer[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosTer[linha] = RDItemList2Ter[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //E
            for (i=0;i<modelprodutoresETer.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosTer[j].equals(REItemListTer[i])) {
                            totalQuantidadeProdutosTer[j] = REItemList2Ter[i] + totalQuantidadeProdutosTer[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosTer[linha] = REItemListTer[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosTer[linha] = REItemList2Ter[i]; //get the element in column "item_code"
                    linha++;
               }
          }
            
          
          
            DefaultListModel modelprodutoresTotaisTer = new DefaultListModel();
          for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosTer[j]!=0)
              modelprodutoresTotaisTer.addElement(totalNomesProdutosTer[j] + " - " +  totalQuantidadeProdutosTer[j].toString()); 
          }
              
               
            
           jListTerTotal.setModel(modelprodutoresTotaisTer);
            
         //TOTAIS QUARTA
           
         //A
            linha=0;
            for (i=0;i<modelprodutoresAQua.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQua[j].equals(RAItemListQua[i])) {
                            totalQuantidadeProdutosQua[j] = RAItemList2Qua[i] + totalQuantidadeProdutosQua[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQua[linha] = RAItemListQua[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQua[linha] = RAItemList2Qua[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
           //B
            for (i=0;i<modelprodutoresBQua.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQua[j].equals(RBItemListQua[i])) {
                            totalQuantidadeProdutosQua[j] = RBItemList2Qua[i] + totalQuantidadeProdutosQua[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQua[linha] = RBItemListQua[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQua[linha] = RBItemList2Qua[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
             //C
            for (i=0;i<modelprodutoresCQua.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQua[j].equals(RCItemListQua[i])) {
                            totalQuantidadeProdutosQua[j] = RCItemList2Qua[i] + totalQuantidadeProdutosQua[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQua[linha] = RCItemListQua[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQua[linha] = RCItemList2Qua[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //D
            for (i=0;i<modelprodutoresDQua.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQua[j].equals(RDItemListQua[i])) {
                            totalQuantidadeProdutosQua[j] = RDItemList2Qua[i] + totalQuantidadeProdutosQua[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQua[linha] = RDItemListQua[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQua[linha] = RDItemList2Qua[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //E
            for (i=0;i<modelprodutoresEQua.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQua[j].equals(REItemListQua[i])) {
                            totalQuantidadeProdutosQua[j] = REItemList2Qua[i] + totalQuantidadeProdutosQua[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQua[linha] = REItemListQua[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQua[linha] = REItemList2Qua[i]; //get the element in column "item_code"
                    linha++;
               }
          }
         
          
          
            DefaultListModel modelprodutoresTotaisQua = new DefaultListModel();
          for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosQua[j]!=0)
              modelprodutoresTotaisQua.addElement(totalNomesProdutosQua[j] + " - " +  totalQuantidadeProdutosQua[j].toString()); 
          }
              
               
            
           jListQuaTotal.setModel(modelprodutoresTotaisQua);
        
        //TOTAIS QUINTA
           
          //A
            linha=0;
            for (i=0;i<modelprodutoresAQui.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQui[j].equals(RAItemListQui[i])) {
                            totalQuantidadeProdutosQui[j] = RAItemList2Qui[i] + totalQuantidadeProdutosQui[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQui[linha] = RAItemListQui[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQui[linha] = RAItemList2Qui[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
           //B
            for (i=0;i<modelprodutoresBQui.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQui[j].equals(RBItemListQui[i])) {
                            totalQuantidadeProdutosQui[j] = RBItemList2Qui[i] + totalQuantidadeProdutosQui[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQui[linha] = RBItemListQui[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQui[linha] = RBItemList2Qui[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
             //C
            for (i=0;i<modelprodutoresCQui.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQui[j].equals(RCItemListQui[i])) {
                            totalQuantidadeProdutosQui[j] = RCItemList2Qui[i] + totalQuantidadeProdutosQui[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQui[linha] = RCItemListQui[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQui[linha] = RCItemList2Qui[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //D
            for (i=0;i<modelprodutoresDQui.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQui[j].equals(RDItemListQui[i])) {
                            totalQuantidadeProdutosQui[j] = RDItemList2Qui[i] + totalQuantidadeProdutosQui[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQui[linha] = RDItemListQui[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQui[linha] = RDItemList2Qui[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //E
            for (i=0;i<modelprodutoresEQui.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosQui[j].equals(REItemListQui[i])) {
                            totalQuantidadeProdutosQui[j] = REItemList2Qui[i] + totalQuantidadeProdutosQui[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosQui[linha] = REItemListQui[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosQui[linha] = REItemList2Qui[i]; //get the element in column "item_code"
                    linha++;
               }
          }
          
          
            DefaultListModel modelprodutoresTotaisQui = new DefaultListModel();
          for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosQui[j]!=0)
              modelprodutoresTotaisQui.addElement(totalNomesProdutosQui[j] + " - " +  totalQuantidadeProdutosQui[j].toString()); 
          }
              
               
            
           jListQuiTotal.setModel(modelprodutoresTotaisQui);  
        //TOTAIS SEXTA
           
         //A
            linha=0;
            for (i=0;i<modelprodutoresASex.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSex[j].equals(RAItemListSex[i])) {
                            totalQuantidadeProdutosSex[j] = RAItemList2Sex[i] + totalQuantidadeProdutosSex[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSex[linha] = RAItemListSex[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSex[linha] = RAItemList2Sex[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
           //B
            for (i=0;i<modelprodutoresBSex.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSex[j].equals(RBItemListSex[i])) {
                            totalQuantidadeProdutosSex[j] = RBItemList2Sex[i] + totalQuantidadeProdutosSex[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSex[linha] = RBItemListSex[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSex[linha] = RBItemList2Sex[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
             //C
            for (i=0;i<modelprodutoresCSex.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSex[j].equals(RCItemListSex[i])) {
                            totalQuantidadeProdutosSex[j] = RCItemList2Sex[i] + totalQuantidadeProdutosSex[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSex[linha] = RCItemListSex[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSex[linha] = RCItemList2Sex[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //D
            for (i=0;i<modelprodutoresDSex.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSex[j].equals(RDItemListSex[i])) {
                            totalQuantidadeProdutosSex[j] = RDItemList2Sex[i] + totalQuantidadeProdutosSex[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSex[linha] = RDItemListSex[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSex[linha] = RDItemList2Sex[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
            //E
            for (i=0;i<modelprodutoresESex.size();i++){
               control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutosSex[j].equals(REItemListSex[i])) {
                            totalQuantidadeProdutosSex[j] = REItemList2Sex[i] + totalQuantidadeProdutosSex[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutosSex[linha] = REItemListSex[i]; //get the element in column "item_code"
                   totalQuantidadeProdutosSex[linha] = REItemList2Sex[i]; //get the element in column "item_code"
                    linha++;
               }
          }
          
          
          
            DefaultListModel modelprodutoresTotaisSex = new DefaultListModel();
          for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutosSex[j]!=0)
              modelprodutoresTotaisSex.addElement(totalNomesProdutosSex[j] + " - " +  totalQuantidadeProdutosSex[j].toString()); 
          }
              
               
            
           jListSexTotal.setModel(modelprodutoresTotaisSex);   
           
            
        }
        catch (SQLException err) {
            JOptionPane.showMessageDialog(ListaProducaoSemanal.this, err.getMessage());
        }
    }

    private void closeApplication() {
        dispose();
    }
}
