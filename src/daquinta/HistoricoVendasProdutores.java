/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package daquinta;

import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author toshiba
 */
public class HistoricoVendasProdutores extends javax.swing.JFrame {

    /**
     * Creates new form HistoricoVendasProdutores
     */
    
    Connection con, con2;
    Statement stmt, stmt2;
    
    static String dbName = "daquinta_teste"; //Nome do Banco criado
     
    int curRow = 0;
    int IDs = 1;
    int totalProdutos, totalRestaurantes;
    String []totalNomesProdutos;
    Integer []totalQuantidadeProdutos;
    String [] RAItemList, RBItemList,RCItemList,RDItemList,REItemList,RFItemList,RGItemList,RHItemList;
    Integer[] RAItemList2, RBItemList2,RCItemList2,RDItemList2,REItemList2,RFItemList2,RGItemList2,RHItemList2 ;
    DB conDB = new DB();
    boolean editar = false, criarnovo=false;
    //data 
           java.util.Date date = new java.util.Date();
           java.util.Date date2 = new java.util.Date();
    
            
    
         
    Integer ano=date.getYear()+1900;
    
   
     DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
   
    
    Calendar cal = Calendar.getInstance();
     Calendar calUk = Calendar.getInstance(Locale.UK);  
    
   
    
    
    JComboBox cbIdDisciplina, cbDisciplina; 
    
   
    ResultSet rs, rsProdutos;
   
       
    public HistoricoVendasProdutores() {
         initComponents();
         DoConnect();
        setLocationRelativeTo(null);
         Integer get = calUk.get( Calendar.WEEK_OF_YEAR );
        jLabelData1.setText(dateFormat.format(date).toString());
        jComboBoxAno1.setSelectedIndex(ano-2011);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancel1 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabelData1 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jBtnPesquisa1 = new javax.swing.JButton();
        jComboBoxAno1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jListTotal1 = new javax.swing.JList();
        jScrollPane10 = new javax.swing.JScrollPane();
        jListProdutorE = new javax.swing.JList();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListProdutorD = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListProdutorC = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListProdutorB = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListProdutorA = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Historico Produtores");
        setResizable(false);

        btnCancel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/118.png"))); // NOI18N
        btnCancel1.setText("Cancelar");
        btnCancel1.setMaximumSize(new java.awt.Dimension(111, 41));
        btnCancel1.setMinimumSize(new java.awt.Dimension(111, 41));
        btnCancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancel1ActionPerformed(evt);
            }
        });

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/83.png"))); // NOI18N
        jLabel22.setText("Historico");
        jLabel22.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabelData1.setText("88-88.8888");

        jLabel19.setText("DATA:");

        jBtnPesquisa1.setText("Pesquisa");
        jBtnPesquisa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPesquisa1ActionPerformed(evt);
            }
        });

        jComboBoxAno1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2011", "2012", "2013", "2014", "2015" }));

        jLabel3.setText("Special Flowers");

        jLabel4.setText("Ricardo de Matos");

        jLabel5.setText("Luís Godinho");

        jLabel6.setText("Quinta da Várzea");

        jLabel7.setText("Jardim da Boa Palavra");

        jLabel8.setText("Total");

        jListTotal1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane11.setViewportView(jListTotal1);

        jScrollPane10.setViewportView(jListProdutorE);

        jScrollPane9.setViewportView(jListProdutorD);

        jScrollPane8.setViewportView(jListProdutorC);

        jScrollPane7.setViewportView(jListProdutorB);

        jScrollPane1.setViewportView(jListProdutorA);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelData1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jComboBoxAno1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnPesquisa1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel22))
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnCancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(152, 152, 152))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelData1)
                            .addComponent(jLabel19))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)))
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxAno1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnPesquisa1)
                    .addComponent(btnCancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnPesquisa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPesquisa1ActionPerformed
        // TODO add your handling code here:
        ano = Integer.parseInt((String) jComboBoxAno1.getSelectedItem());
        DoConnect();
    }//GEN-LAST:event_jBtnPesquisa1ActionPerformed

    private void btnCancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancel1ActionPerformed
        // TODO add your handling code here:

        closeApplication();
    }//GEN-LAST:event_btnCancel1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistoricoVendasProdutores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistoricoVendasProdutores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistoricoVendasProdutores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistoricoVendasProdutores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new HistoricoVendasProdutores().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel1;
    private javax.swing.JButton jBtnPesquisa1;
    private javax.swing.JComboBox jComboBoxAno1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelData1;
    private javax.swing.JList jListProdutorA;
    private javax.swing.JList jListProdutorB;
    private javax.swing.JList jListProdutorC;
    private javax.swing.JList jListProdutorD;
    private javax.swing.JList jListProdutorE;
    private javax.swing.JList jListTotal1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables

    private void DoConnect() {
        try {
            String host = "jdbc:mysql://localhost:3306/"+dbName;
            String uName = "root";
            String uPass ="admin";
            con = DriverManager.getConnection(host, uName, uPass);
            
            stmt = con.createStatement();
            
            DefaultListModel modelRestauranteA = new DefaultListModel(); //create a new list model
            DefaultListModel modelRestauranteB = new DefaultListModel();
            DefaultListModel modelRestauranteC = new DefaultListModel();
            DefaultListModel modelRestauranteD = new DefaultListModel();
            DefaultListModel modelRestauranteE = new DefaultListModel();
            DefaultListModel modelRestauranteF = new DefaultListModel();
            DefaultListModel modelRestauranteG = new DefaultListModel();
            DefaultListModel modelRestauranteH = new DefaultListModel();
            DefaultListModel modelRestauranteTotais = new DefaultListModel();
            
            
            //Restaurante 1
            String sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE produtores_idprodutores=1 and YEAR(data)="+ano;
            
           
            ResultSet rsProdutosRestauranteA1;
            
            rsProdutosRestauranteA1 = stmt.executeQuery(sql1);
            
                     
            
            int linha=0,j;
            
            rsProdutosRestauranteA1.last();
           
            RAItemList= new String[rsProdutosRestauranteA1.getRow()];
            RAItemList2= new Integer[rsProdutosRestauranteA1.getRow()];
            
            boolean control;
            rsProdutosRestauranteA1.beforeFirst();
            while (rsProdutosRestauranteA1.next()){ 
               control=false;
               for(j=0;j<RAItemList.length;j++)  {
                    if (rsProdutosRestauranteA1.getString("produtos.nome").equals(RAItemList[j]) && rsProdutosRestauranteA1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RAItemList2[j] = RAItemList2[j] + rsProdutosRestauranteA1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteA1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RAItemList[linha] = rsProdutosRestauranteA1.getString("produtos.nome"); //get the element in column "item_code"
                    RAItemList2[linha] = rsProdutosRestauranteA1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteA.addElement(RAItemList[j] + " - " + RAItemList2[j].toString()); 
            
            jListProdutorA.setModel(modelRestauranteA);
            
           
           //Restaurante 2
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE produtores_idprodutores=2 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteB1;
            
            rsProdutosRestauranteB1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteB1.last();
           
            RBItemList= new String[rsProdutosRestauranteB1.getRow()];
            RBItemList2= new Integer[rsProdutosRestauranteB1.getRow()];
            
            rsProdutosRestauranteB1.next();
            rsProdutosRestauranteB1.beforeFirst();
            
            while (rsProdutosRestauranteB1.next()){ 
               control=false;
               for(j=0;j<RBItemList.length;j++)  {
                    if (rsProdutosRestauranteB1.getString("produtos.nome").equals(RBItemList[j]) && rsProdutosRestauranteB1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RBItemList2[j] = RBItemList2[j] + rsProdutosRestauranteB1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteB1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RBItemList[linha] = rsProdutosRestauranteB1.getString("produtos.nome"); //get the element in column "item_code"
                    RBItemList2[linha] = rsProdutosRestauranteB1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
           
            }
           for(j=0;j<linha;j++)  
               modelRestauranteB.addElement(RBItemList[j] + " - " + RBItemList2[j].toString()); 
            
           jListProdutorB.setModel(modelRestauranteB);
           
           //Restaurante 3
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE produtores_idprodutores=3 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteC1;
            
            rsProdutosRestauranteC1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteC1.last();
           
            RCItemList= new String[rsProdutosRestauranteC1.getRow()];
            RCItemList2= new Integer[rsProdutosRestauranteC1.getRow()];
            
            rsProdutosRestauranteC1.next();
            rsProdutosRestauranteC1.beforeFirst();
            
            while (rsProdutosRestauranteC1.next()){ 
               control=false;
               for(j=0;j<RCItemList.length;j++)  {
                    if (rsProdutosRestauranteC1.getString("produtos.nome").equals(RCItemList[j]) && rsProdutosRestauranteC1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RCItemList2[j] = RCItemList2[j] + rsProdutosRestauranteC1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteC1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RCItemList[linha] = rsProdutosRestauranteC1.getString("produtos.nome"); //get the element in column "item_code"
                    RCItemList2[linha] = rsProdutosRestauranteC1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteC.addElement(RCItemList[j] + " - " + RCItemList2[j].toString()); 
            
            jListProdutorC.setModel(modelRestauranteC);
            
          //Restaurante 4
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE produtores_idprodutores=4 and YEAR(data)="+ano;
             ResultSet rsProdutosRestauranteD1;
            
            rsProdutosRestauranteD1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteD1.last();
           
            RDItemList= new String[rsProdutosRestauranteD1.getRow()];
            RDItemList2= new Integer[rsProdutosRestauranteD1.getRow()];
            
            rsProdutosRestauranteD1.next();
            rsProdutosRestauranteD1.beforeFirst();
            
            while (rsProdutosRestauranteD1.next()){ 
               control=false;
               for(j=0;j<RDItemList.length;j++)  {
                    if (rsProdutosRestauranteD1.getString("produtos.nome").equals(RDItemList[j]) && rsProdutosRestauranteD1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RDItemList2[j] = RDItemList2[j] + rsProdutosRestauranteD1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteD1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RDItemList[linha] = rsProdutosRestauranteD1.getString("produtos.nome"); //get the element in column "item_code"
                    RDItemList2[linha] = rsProdutosRestauranteD1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteD.addElement(RDItemList[j] + " - " + RDItemList2[j].toString()); 
            
            jListProdutorD.setModel(modelRestauranteD);
            
           //Restaurante 5
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE produtores_idprodutores=5 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteE1;
            
            rsProdutosRestauranteE1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteE1.last();
           
            REItemList= new String[rsProdutosRestauranteE1.getRow()];
            REItemList2= new Integer[rsProdutosRestauranteE1.getRow()];
            
           
            
           rsProdutosRestauranteE1.next();
            rsProdutosRestauranteE1.beforeFirst();
            
            while (rsProdutosRestauranteE1.next()){ 
               control=false;
               for(j=0;j<REItemList.length;j++)  {
                    if (rsProdutosRestauranteE1.getString("produtos.nome").equals(REItemList[j]) && rsProdutosRestauranteE1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            REItemList2[j] = REItemList2[j] + rsProdutosRestauranteE1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteE1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    REItemList[linha] = rsProdutosRestauranteE1.getString("produtos.nome"); //get the element in column "item_code"
                    REItemList2[linha] = rsProdutosRestauranteE1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteE.addElement(REItemList[j] + " - " + REItemList2[j].toString()); 
            
            jListProdutorE.setModel(modelRestauranteE);
            
            
            
           //Totais
           sql1 = "select * from produtos ";
            
           ResultSet rsProdutosTotais;
            
           rsProdutosTotais = stmt.executeQuery(sql1);
           
            
           rsProdutosTotais.last();
           
            
                            
            totalProdutos=rsProdutosTotais.getRow(); 
            //totalRestaurantes=rsProdutosTotais.getRow();
            totalNomesProdutos = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutos = new Integer[rsProdutosTotais.getInt(1)];
            for(j=0;j<totalProdutos;j++)  {
                totalNomesProdutos[j] = " ";
                totalQuantidadeProdutos[j] = 0;
            }
            
          linha=0;
          for (int i=0;i<modelRestauranteA.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RAItemList[i])) {
                            totalQuantidadeProdutos[j] = RAItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RAItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RAItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          
          
         for (int i=0;i<modelRestauranteB.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RBItemList[i])) {
                            totalQuantidadeProdutos[j] = RBItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RBItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RBItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          for (int i=0;i<modelRestauranteC.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RCItemList[i])) {
                            totalQuantidadeProdutos[j] = RCItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RCItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RCItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          
         for (int i=0;i<modelRestauranteD.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RDItemList[i])) {
                            totalQuantidadeProdutos[j] = RDItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RDItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RDItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          for (int i=0;i<modelRestauranteE.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(REItemList[i])) {
                            totalQuantidadeProdutos[j] = REItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = REItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = REItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          
          
          for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutos[j]!=0)
              modelRestauranteTotais.addElement(totalNomesProdutos[j] + " - " +  totalQuantidadeProdutos[j].toString()); 
          }
              
               
            
           jListTotal1.setModel(modelRestauranteTotais);
         
            
            
        }
        catch (SQLException err) {
            JOptionPane.showMessageDialog(HistoricoVendasProdutores.this, err.getMessage());
        }
    }

    private void closeApplication() {
        dispose();
    
    }
}
