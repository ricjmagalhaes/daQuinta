/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package daquinta;

import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author toshiba
 */
public class HistoricoComprasRestaurantes extends javax.swing.JFrame {

    /**
     * Creates new form HistoricoComprasRestaurantes
     */
    /**
     * Creates new form ListaArmazenaveis
     */
    
     Connection con, con2;
    Statement stmt, stmt2;
    
    static String dbName = "daquinta_teste"; //Nome do Banco criado
     
    int curRow = 0;
    int IDs = 1;
    int totalProdutos, totalRestaurantes;
    String []totalNomesProdutos;
    Integer []totalQuantidadeProdutos;
    String [] RAItemList, RBItemList,RCItemList,RDItemList,REItemList,RFItemList,RGItemList,RHItemList;
    Integer[] RAItemList2, RBItemList2,RCItemList2,RDItemList2,REItemList2,RFItemList2,RGItemList2,RHItemList2 ;
    DB conDB = new DB();
    boolean editar = false, criarnovo=false;
    //data 
           java.util.Date date = new java.util.Date();
           java.util.Date date2 = new java.util.Date();
    
            
    
         
    Integer ano=date.getYear()+1900;
    
   
     DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
   
    
    Calendar cal = Calendar.getInstance();
     Calendar calUk = Calendar.getInstance(Locale.UK);  
    
   
    
    
    JComboBox cbIdDisciplina, cbDisciplina; 
    
   
    ResultSet rs, rsProdutos;
   
    
    
    public HistoricoComprasRestaurantes() {
        initComponents();
         DoConnect();
        setLocationRelativeTo(null);
         Integer get = calUk.get( Calendar.WEEK_OF_YEAR );
        jLabelData.setText(dateFormat.format(date).toString());
        jComboBoxAno.setSelectedIndex(ano-2011);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel17 = new javax.swing.JLabel();
        jLabelData = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabelSemana = new javax.swing.JLabel();
        jComboBoxAno = new javax.swing.JComboBox();
        jBtnPesquisa = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList5 = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        jList6 = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        jList7 = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        jList8 = new javax.swing.JList();
        jLabel19 = new javax.swing.JLabel();
        jLabelData1 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabelSemana1 = new javax.swing.JLabel();
        jComboBoxAno1 = new javax.swing.JComboBox();
        jBtnPesquisa1 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        btnCancel1 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListTotal1 = new javax.swing.JList();
        jLabel56 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        jLabel17.setText("DATA:");

        jLabelData.setText("88-88.8888");

        jLabel18.setText("Semana:");

        jLabelSemana.setText("jLabel17");

        jComboBoxAno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2011", "2012", "2013", "2014", "2015" }));

        jBtnPesquisa.setText("Pesquisa");
        jBtnPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPesquisaActionPerformed(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/78.png"))); // NOI18N
        jLabel20.setText("Encomendas");
        jLabel20.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabel1.setText("Centro Social de Palmela");

        jLabel42.setText("Restaurante “O Parque”");

        jLabel43.setText("Restaurante “Champanheria”");

        jLabel44.setText("Restaurante “Três15Dias”");

        jLabel45.setText("Restaurante “D. Isilda”");

        jLabel46.setText("Restaurante “Malagueta”");

        jLabel47.setText("Vale dos Pintassilgos");

        jLabel48.setText("Santa Casa da Misericórdia");

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/118.png"))); // NOI18N
        btnCancel.setText("Cancelar");
        btnCancel.setMaximumSize(new java.awt.Dimension(111, 41));
        btnCancel.setMinimumSize(new java.awt.Dimension(111, 41));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Historico Compras Restaurantes");
        setResizable(false);

        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setViewportView(jList2);

        jScrollPane3.setViewportView(jList3);

        jScrollPane4.setViewportView(jList4);

        jScrollPane5.setViewportView(jList5);

        jScrollPane6.setViewportView(jList6);

        jScrollPane7.setViewportView(jList7);

        jScrollPane8.setViewportView(jList8);

        jLabel19.setText("DATA:");

        jLabelData1.setText("88-88.8888");

        jLabel21.setText("Semana:");

        jLabelSemana1.setText("jLabel17");

        jComboBoxAno1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2011", "2012", "2013", "2014", "2015" }));

        jBtnPesquisa1.setText("Pesquisa");
        jBtnPesquisa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPesquisa1ActionPerformed(evt);
            }
        });

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/83.png"))); // NOI18N
        jLabel22.setText("Historico");
        jLabel22.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabel2.setText("C. S. de Palmela");

        jLabel49.setText("R“O Parque”");

        jLabel50.setText("R “Champanheria”");

        jLabel51.setText("R “Três15Dias”");

        jLabel52.setText("R “D. Isilda”");

        jLabel53.setText("R “Malagueta”");

        jLabel54.setText("Vale Pintassilgos");

        jLabel55.setText("SC Misericórdia");

        btnCancel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/118.png"))); // NOI18N
        btnCancel1.setText("Cancelar");
        btnCancel1.setMaximumSize(new java.awt.Dimension(111, 41));
        btnCancel1.setMinimumSize(new java.awt.Dimension(111, 41));
        btnCancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancel1ActionPerformed(evt);
            }
        });

        jListTotal1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane9.setViewportView(jListTotal1);

        jLabel56.setText("Total");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel22)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(35, 35, 35)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel49)
                                .addGap(58, 58, 58)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addGap(20, 20, 20)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel51))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel52)
                                .addGap(65, 65, 65)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel53)
                                .addGap(46, 46, 46)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel54))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel55)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel56)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxAno1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnPesquisa1)
                        .addGap(99, 99, 99)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(517, 517, 517)
                        .addComponent(btnCancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel19)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabelData1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(208, 208, 208)
                            .addComponent(jLabel21)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelSemana1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(920, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel49)
                    .addComponent(jLabel50)
                    .addComponent(jLabel51)
                    .addComponent(jLabel52)
                    .addComponent(jLabel53)
                    .addComponent(jLabel54)
                    .addComponent(jLabel55)
                    .addComponent(jLabel56))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxAno1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnPesquisa1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelData1)
                        .addComponent(jLabel19)
                        .addComponent(jLabel21)
                        .addComponent(jLabelSemana1))
                    .addContainerGap(498, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPesquisaActionPerformed
        // TODO add your handling code here:
        ano = Integer.parseInt((String) jComboBoxAno.getSelectedItem());
        DoConnect();
    }//GEN-LAST:event_jBtnPesquisaActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:

        closeApplication();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jBtnPesquisa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPesquisa1ActionPerformed
        // TODO add your handling code here:
        ano = Integer.parseInt((String) jComboBoxAno.getSelectedItem());
         DoConnect();
    }//GEN-LAST:event_jBtnPesquisa1ActionPerformed

    private void btnCancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancel1ActionPerformed
        // TODO add your handling code here:

        closeApplication();
    }//GEN-LAST:event_btnCancel1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistoricoComprasRestaurantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistoricoComprasRestaurantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistoricoComprasRestaurantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistoricoComprasRestaurantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new HistoricoComprasRestaurantes().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCancel1;
    private javax.swing.JButton jBtnPesquisa;
    private javax.swing.JButton jBtnPesquisa1;
    private javax.swing.JComboBox jComboBoxAno;
    private javax.swing.JComboBox jComboBoxAno1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelData1;
    private javax.swing.JLabel jLabelSemana;
    private javax.swing.JLabel jLabelSemana1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JList jList4;
    private javax.swing.JList jList5;
    private javax.swing.JList jList6;
    private javax.swing.JList jList7;
    private javax.swing.JList jList8;
    private javax.swing.JList jListTotal1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void DoConnect() {
       try {
            String host = "jdbc:mysql://localhost:3306/"+dbName;
            String uName = "root";
            String uPass ="admin";
            con = DriverManager.getConnection(host, uName, uPass);
            
            stmt = con.createStatement();
            
            DefaultListModel modelRestauranteA = new DefaultListModel(); //create a new list model
            DefaultListModel modelRestauranteB = new DefaultListModel();
            DefaultListModel modelRestauranteC = new DefaultListModel();
            DefaultListModel modelRestauranteD = new DefaultListModel();
            DefaultListModel modelRestauranteE = new DefaultListModel();
            DefaultListModel modelRestauranteF = new DefaultListModel();
            DefaultListModel modelRestauranteG = new DefaultListModel();
            DefaultListModel modelRestauranteH = new DefaultListModel();
            DefaultListModel modelRestauranteTotais = new DefaultListModel();
            
            
            //Restaurante 1
            String sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE restaurantes_idrestaurantes=1 and YEAR(data)="+ano;
            
           
            ResultSet rsProdutosRestauranteA1;
            
            rsProdutosRestauranteA1 = stmt.executeQuery(sql1);
            
                     
            
            int linha=0,j;
            
            rsProdutosRestauranteA1.last();
           
            RAItemList= new String[rsProdutosRestauranteA1.getRow()];
            RAItemList2= new Integer[rsProdutosRestauranteA1.getRow()];
            
            boolean control;
            rsProdutosRestauranteA1.beforeFirst();
            while (rsProdutosRestauranteA1.next()){ 
               control=false;
               for(j=0;j<RAItemList.length;j++)  {
                    if (rsProdutosRestauranteA1.getString("produtos.nome").equals(RAItemList[j]) && rsProdutosRestauranteA1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RAItemList2[j] = RAItemList2[j] + rsProdutosRestauranteA1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteA1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RAItemList[linha] = rsProdutosRestauranteA1.getString("produtos.nome"); //get the element in column "item_code"
                    RAItemList2[linha] = rsProdutosRestauranteA1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteA.addElement(RAItemList[j] + " - " + RAItemList2[j].toString()); 
            
            jList1.setModel(modelRestauranteA);
            
           
           //Restaurante 2
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE restaurantes_idrestaurantes=2 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteB1;
            
            rsProdutosRestauranteB1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteB1.last();
           
            RBItemList= new String[rsProdutosRestauranteB1.getRow()];
            RBItemList2= new Integer[rsProdutosRestauranteB1.getRow()];
            
            rsProdutosRestauranteB1.next();
            rsProdutosRestauranteB1.beforeFirst();
            
            while (rsProdutosRestauranteB1.next()){ 
               control=false;
               for(j=0;j<RBItemList.length;j++)  {
                    if (rsProdutosRestauranteB1.getString("produtos.nome").equals(RBItemList[j]) && rsProdutosRestauranteB1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RBItemList2[j] = RBItemList2[j] + rsProdutosRestauranteB1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteB1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RBItemList[linha] = rsProdutosRestauranteB1.getString("produtos.nome"); //get the element in column "item_code"
                    RBItemList2[linha] = rsProdutosRestauranteB1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
           
            }
           for(j=0;j<linha;j++)  
               modelRestauranteB.addElement(RBItemList[j] + " - " + RBItemList2[j].toString()); 
            
            jList2.setModel(modelRestauranteB);
           
           //Restaurante 3
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE restaurantes_idrestaurantes=3 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteC1;
            
            rsProdutosRestauranteC1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteC1.last();
           
            RCItemList= new String[rsProdutosRestauranteC1.getRow()];
            RCItemList2= new Integer[rsProdutosRestauranteC1.getRow()];
            
            rsProdutosRestauranteC1.next();
            rsProdutosRestauranteC1.beforeFirst();
            
            while (rsProdutosRestauranteC1.next()){ 
               control=false;
               for(j=0;j<RCItemList.length;j++)  {
                    if (rsProdutosRestauranteC1.getString("produtos.nome").equals(RCItemList[j]) && rsProdutosRestauranteC1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RCItemList2[j] = RCItemList2[j] + rsProdutosRestauranteC1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteC1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RCItemList[linha] = rsProdutosRestauranteC1.getString("produtos.nome"); //get the element in column "item_code"
                    RCItemList2[linha] = rsProdutosRestauranteC1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteC.addElement(RCItemList[j] + " - " + RCItemList2[j].toString()); 
            
            jList3.setModel(modelRestauranteC);
            
          //Restaurante 4
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE restaurantes_idrestaurantes=4 and YEAR(data)="+ano;
             ResultSet rsProdutosRestauranteD1;
            
            rsProdutosRestauranteD1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteD1.last();
           
            RDItemList= new String[rsProdutosRestauranteD1.getRow()];
            RDItemList2= new Integer[rsProdutosRestauranteD1.getRow()];
            
            rsProdutosRestauranteD1.next();
            rsProdutosRestauranteD1.beforeFirst();
            
            while (rsProdutosRestauranteD1.next()){ 
               control=false;
               for(j=0;j<RDItemList.length;j++)  {
                    if (rsProdutosRestauranteD1.getString("produtos.nome").equals(RDItemList[j]) && rsProdutosRestauranteD1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RDItemList2[j] = RDItemList2[j] + rsProdutosRestauranteD1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteD1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RDItemList[linha] = rsProdutosRestauranteD1.getString("produtos.nome"); //get the element in column "item_code"
                    RDItemList2[linha] = rsProdutosRestauranteD1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteD.addElement(RDItemList[j] + " - " + RDItemList2[j].toString()); 
            
            jList4.setModel(modelRestauranteD);
            
           //Restaurante 5
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE restaurantes_idrestaurantes=5 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteE1;
            
            rsProdutosRestauranteE1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteE1.last();
           
            REItemList= new String[rsProdutosRestauranteE1.getRow()];
            REItemList2= new Integer[rsProdutosRestauranteE1.getRow()];
            
           
            
           rsProdutosRestauranteE1.next();
            rsProdutosRestauranteE1.beforeFirst();
            
            while (rsProdutosRestauranteE1.next()){ 
               control=false;
               for(j=0;j<REItemList.length;j++)  {
                    if (rsProdutosRestauranteE1.getString("produtos.nome").equals(REItemList[j]) && rsProdutosRestauranteE1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            REItemList2[j] = REItemList2[j] + rsProdutosRestauranteE1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteE1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    REItemList[linha] = rsProdutosRestauranteE1.getString("produtos.nome"); //get the element in column "item_code"
                    REItemList2[linha] = rsProdutosRestauranteE1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteE.addElement(REItemList[j] + " - " + REItemList2[j].toString()); 
            
            jList5.setModel(modelRestauranteE);
            
            //Restaurante 6
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE restaurantes_idrestaurantes=6 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteF1;
            
            rsProdutosRestauranteF1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteF1.last();
           
            RFItemList= new String[rsProdutosRestauranteF1.getRow()];
            RFItemList2= new Integer[rsProdutosRestauranteF1.getRow()];
          
            rsProdutosRestauranteF1.beforeFirst();
            
            while (rsProdutosRestauranteF1.next()){ 
               control=false;
               for(j=0;j<RFItemList.length;j++)  {
                    if (rsProdutosRestauranteF1.getString("produtos.nome").equals(RFItemList[j]) && rsProdutosRestauranteF1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RFItemList2[j] = RFItemList2[j] + rsProdutosRestauranteF1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteF1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RFItemList[linha] = rsProdutosRestauranteF1.getString("produtos.nome"); //get the element in column "item_code"
                    RFItemList2[linha] = rsProdutosRestauranteF1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteF.addElement(RFItemList[j] + " - " + RFItemList2[j].toString()); 
            
            jList6.setModel(modelRestauranteF);
            
          //Restaurante 7
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE restaurantes_idrestaurantes=7 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteG1;
            
            rsProdutosRestauranteG1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteG1.last();
           
            RGItemList= new String[rsProdutosRestauranteG1.getRow()];
            RGItemList2= new Integer[rsProdutosRestauranteG1.getRow()];
            
           
            
           rsProdutosRestauranteG1.beforeFirst();
            
            while (rsProdutosRestauranteG1.next()){ 
               control=false;
               for(j=0;j<RGItemList.length;j++)  {
                    if (rsProdutosRestauranteG1.getString("produtos.nome").equals(RGItemList[j]) && rsProdutosRestauranteG1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RGItemList2[j] = RGItemList2[j] + rsProdutosRestauranteG1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteG1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RGItemList[linha] = rsProdutosRestauranteG1.getString("produtos.nome"); //get the element in column "item_code"
                    RGItemList2[linha] = rsProdutosRestauranteG1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteG.addElement(RGItemList[j] + " - " + RGItemList2[j].toString()); 
            
            jList7.setModel(modelRestauranteG);  
            
            //Restaurante 8
           sql1 = "SELECT produtos.nome, qtdseg + qtdter + qtdqua + qtdqui + qtdsex "
                    + "FROM "+dbName+".entrega_encomenda INNER JOIN "+dbName+".produtos "
                    + "ON produtos.idprodutos=.entrega_encomenda.produtos_idprodutos "
                    + "WHERE restaurantes_idrestaurantes=8 and YEAR(data)="+ano;
            ResultSet rsProdutosRestauranteH1;
            
            rsProdutosRestauranteH1 = stmt.executeQuery(sql1);
            
        
            
            linha=0;
            
            rsProdutosRestauranteH1.last();
           
            RHItemList= new String[rsProdutosRestauranteH1.getRow()];
            RHItemList2= new Integer[rsProdutosRestauranteH1.getRow()];
            
           
            
           rsProdutosRestauranteH1.beforeFirst();
            
            while (rsProdutosRestauranteH1.next()){ 
               control=false;
               for(j=0;j<RHItemList.length;j++)  {
                    if (rsProdutosRestauranteH1.getString("produtos.nome").equals(RHItemList[j]) && rsProdutosRestauranteH1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                            RHItemList2[j] = RHItemList2[j] + rsProdutosRestauranteH1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex");
                             control=true;
                            break;
                    }
               }
               if (control==false && rsProdutosRestauranteH1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex")!=0) {
                    RHItemList[linha] = rsProdutosRestauranteH1.getString("produtos.nome"); //get the element in column "item_code"
                    RHItemList2[linha] = rsProdutosRestauranteH1.getInt("qtdseg + qtdter + qtdqua + qtdqui + qtdsex"); //get the element in column "item_code"
                    linha++;
               }              
            }
           for(j=0;j<linha;j++)  
               modelRestauranteH.addElement(RHItemList[j] + " - " + RHItemList2[j].toString()); 
            
            jList8.setModel(modelRestauranteH);
            
           //Totais
           sql1 = "select * from produtos ";
            
           ResultSet rsProdutosTotais;
            
           rsProdutosTotais = stmt.executeQuery(sql1);
           
            
           rsProdutosTotais.last();
           
            
                            
            totalProdutos=rsProdutosTotais.getRow(); 
            //totalRestaurantes=rsProdutosTotais.getRow();
            totalNomesProdutos = new String[rsProdutosTotais.getInt(1)];
            totalQuantidadeProdutos = new Integer[rsProdutosTotais.getInt(1)];
            for(j=0;j<totalProdutos;j++)  {
                totalNomesProdutos[j] = " ";
                totalQuantidadeProdutos[j] = 0;
            }
            
          linha=0;
          for (int i=0;i<modelRestauranteA.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RAItemList[i])) {
                            totalQuantidadeProdutos[j] = RAItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RAItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RAItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          
          
         for (int i=0;i<modelRestauranteB.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RBItemList[i])) {
                            totalQuantidadeProdutos[j] = RBItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RBItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RBItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          for (int i=0;i<modelRestauranteC.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RCItemList[i])) {
                            totalQuantidadeProdutos[j] = RCItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RCItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RCItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          
         for (int i=0;i<modelRestauranteD.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RDItemList[i])) {
                            totalQuantidadeProdutos[j] = RDItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RDItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RDItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          for (int i=0;i<modelRestauranteE.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(REItemList[i])) {
                            totalQuantidadeProdutos[j] = REItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = REItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = REItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          for (int i=0;i<modelRestauranteF.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RFItemList[i])) {
                            totalQuantidadeProdutos[j] = RFItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RFItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RFItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          for (int i=0;i<modelRestauranteG.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RGItemList[i])) {
                            totalQuantidadeProdutos[j] = RGItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RGItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RGItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          for (int i=0;i<modelRestauranteH.size();i++){
                control=false;
               for(j=0;j<totalProdutos;j++)  {
                    if (totalNomesProdutos[j].equals(RHItemList[i])) {
                            totalQuantidadeProdutos[j] = RHItemList2[i] + totalQuantidadeProdutos[j];
                            control=true;
                            break;
                    }
               }
               if (control==false) {
                   totalNomesProdutos[linha] = RHItemList[i]; //get the element in column "item_code"
                   totalQuantidadeProdutos[linha] = RHItemList2[i]; //get the element in column "item_code"
                    linha++;
               }
          
          }
          
          for(j=0;j<totalProdutos;j++)  {
              if (totalQuantidadeProdutos[j]!=0)
              modelRestauranteTotais.addElement(totalNomesProdutos[j] + " - " +  totalQuantidadeProdutos[j].toString()); 
          }
              
               
            
           jListTotal1.setModel(modelRestauranteTotais);
         
            
            
        }
        catch (SQLException err) {
            JOptionPane.showMessageDialog(HistoricoComprasRestaurantes.this, err.getMessage());
        }
    }

    private void closeApplication() {
        dispose();
    }
}
